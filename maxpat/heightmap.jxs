<jittershader name="heightmap">
	<description>
          heightmap
	</description>
        <param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
        <param name="foo" type="float" default="0.0">
		<description>Foo</description>
	</param>
        <param name="time" type="float" default="0.0">
		<description>Time</description>
	</param>

	<language name="glsl" version="1.0">
		<bind param="foo" program="vp" />
		<bind param="time" program="fp" />
	        <bind param="tex0" program="vp" />
                <bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[


varying vec2 texcoord0;
varying vec2 texcoord1;
uniform float foo;

uniform sampler2DRect tex0;


void main()
{
    float bar = foo;


    vec4 tmp = gl_Vertex;
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    tmp.z = -1.0 * foo * texture2DRect(tex0, texcoord0.xy).r;

    vec4 pos = gl_ModelViewProjectionMatrix * tmp;


    texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    gl_Position = pos;

}

]]>
</program>

<program name="fp" type="fragment">
<![CDATA[

// texcoords
varying vec2 texcoord0;
varying vec2 texcoord1;

// samplers
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;

// blend amount

uniform float time;

// entry point
void main()
{
        vec4 bla = texture2DRect(tex1, texcoord1);
	vec4 c = texture2DRect(tex0, texcoord0);

        float d = c.r;
       // if (d > 0.3) c.r = 1.0;
     //   if (d > 0.6) c.g = sqrt(d);

       c.r = 0.5 + 0.5 * sin(d*20.0*3.14+time);
       c.g = 0.0;
       c.b = 0.0;

	// result either blend or mask based on mode
	gl_FragColor = c;

	// setting the fragment color is a useful means of debugging
}

]]>
		</program>
	</language>
</jittershader>
