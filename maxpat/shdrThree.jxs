<jittershader name="shdrOne">
         <description>
         </description>
         <param name="pitch" type="vec2" default="0. 0." />
         <param name="pitchEffect" type="float" default="1.0"/>
         <param name="texmode" type="int" default="0" />
         <param name="brightness" type="float" default="1.0" />
         <param name="tex0" type="int" default="0" />
         <language name="glsl" version="1.0">

         <bind param="pitch" program="fp"/>
         <bind param="pitchEffect" program="fp"/>
         <bind param="tex0" program="fp" />
         <bind param="texmode" program="fp" />
         <bind param="brightness" program="fp" />
         <program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
         <program name="fp" type="fragment">

<![CDATA[

varying vec2 texcoord0;
varying vec2 texcoord1;

uniform vec2 pitch;
uniform float pitchEffect;
uniform sampler2D tex0;
uniform int texmode;
uniform float brightness;

const float PI = 3.1415927;

// entry point
void main()
{
        float r, theta, x, y;
        vec2 xynorm;

	// result either blend or mask based on mode
//        float outline = 0.0;
//        if (texcoord0.x < 0.1 || texcoord0.x > 0.9 || texcoord0.y < 0.1 || texcoord0.y > 0.9)
//           outline = 1.0;
//        outline = max(0.0, sign(sin(texcoord0.x*20.0*3.14+10.0)));

//	gl_FragColor = vec4(outline, pitch.y, outline, 1.0) * pitch.x;

        vec4 finalColor = vec4(1.0, 1.0, 1.0, 1.0);

        if (texmode > 0)
        {
                if (texmode < 3)
                {
                        finalColor = texture2D(tex0, texcoord0);// * pitch.x;// + vec4(0.0, 0.5, 0.0, 1.0);
                        finalColor = min(finalColor, vec4(1.0, 1.0, 1.0, 1.0));
                        //  finalColor = finalColor * pow( 2.0*(0.9 - abs(texcoord0.y - 0.5)), 3.0);
                }
                else
                {
                        r = distance(texcoord0, vec2(0.5, 0.5));
                        xynorm = texcoord0 - vec2(0.5, 0.5);
                        theta = atan(xynorm.y, xynorm.x);
                        x = r * cos(theta);
                        y = r * sin(theta);
                        finalColor = texture2D(tex0, vec2(r * 2.0, theta));
                        if (r > .4)
                                finalColor = vec4(0.0);
                }

                if (texmode >= 2)
                        finalColor.r *= mix(1.0, pitch.x, pitchEffect);

        }


        float rgbsum = finalColor.r * 0.33 + finalColor.g * 0.33 + finalColor.b * 0.33;
        if (rgbsum < 0.25)
                finalColor *= 0.0;

        gl_FragColor = finalColor * brightness;



//        gl_FragColor = vec4(texcoord0.x, texcoord0.y, 0.0, 1.0);

	// setting the fragment color is a useful means of debugging
}

]]>
		</program>
	</language>
</jittershader>
